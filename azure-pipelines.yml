# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- autopr

jobs:
- job: Default
  timeoutInMinutes: 0

  pool:
    vmImage: 'windows-latest'

  variables:
    solution: '$(build.SourcesDirectory)/build/LLVM.sln'
    buildPlatform: 'x64'
#    buildConfiguration: 'Debug'
    buildConfiguration: 'MinSizeRel'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

  steps:
  - checkout: self
    fetchDepth: 1

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  # CMake
  # Build with the CMake cross-platform build system
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-G "Visual Studio 16 2019" -DCMAKE_PREFIX_PATH=$(build.artifactStagingDirectory)/$(buildConfiguration) -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_EXAMPLES=ON -DCLANG_BUILD_EXAMPLES=ON  -Thost=x64 ../llvm/'

#  - task: VSBuild@1
#    inputs:
#      platform: '$(buildPlatform)'
#      solution: '$(solution)'
#      configuration: '$(buildConfiguration)'
#      msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /m'
#      maximumCpuCount: true

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '--build . --config "$(buildConfiguration)" --parallel'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '--install . --config "$(buildConfiguration)" --prefix "$(Build.ArtifactStagingDirectory)/$(buildConfiguration)"'

#  - task: CopyFiles@2
#    inputs:
#      SourceFolder: 'build'
#      Contents: '**'
#      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: llvm-project
